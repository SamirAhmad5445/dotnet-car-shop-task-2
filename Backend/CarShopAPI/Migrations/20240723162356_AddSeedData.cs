using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace CarShopAPI.Migrations
{
    /// <inheritdoc />
    public partial class AddSeedData : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.InsertData(
                table: "Cars",
                columns: new[] { "Id", "Color", "ModelNumber", "Name", "Type" },
                values: new object[,]
                {
                    { 1, "Red", 2009, "Sunny", "Gas" },
                    { 2, "Red", 2012, "Tesla Model S", "Electrical" },
                    { 3, "Green", 2010, "Nissan Leaf", "Electrical" },
                    { 4, "Yellow", 2005, "Ford Mustang", "Gas" },
                    { 5, "Silver", 2001, "Honda Civic", "Gas" },
                    { 6, "Black", 2005, "Chevrolet Corvette", "Gas" },
                    { 7, "White", 2000, "BMW X5", "Gas" },
                    { 8, "Gray", 2002, "Mercedes-Benz E-Class", "Gas" },
                    { 9, "Blue", 2005, "Audi Q7", "Gas" },
                    { 10, "Green", 2000, "Subaru Outback", "Gas" },
                    { 11, "Red", 2003, "Volkswagen Golf", "Gas" },
                    { 12, "Silver", 2004, "Lexus RX", "Gas" },
                    { 13, "Orange", 2007, "Jeep Wrangler", "Gas" },
                    { 14, "Blue", 2012, "Mazda CX-5", "Gas" },
                    { 15, "Black", 2003, "Volvo XC90", "Gas" }
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "FirstName", "IsActive", "IsAdmin", "LastName", "PasswordHash", "PasswordSalt", "Username" },
                values: new object[,]
                {
                    { 1, "Samir", true, true, "Ahmad", new byte[] { 98, 20, 156, 126, 175, 211, 201, 158, 189, 101, 126, 134, 67, 78, 16, 51, 18, 227, 223, 118, 215, 141, 99, 6, 191, 115, 70, 31, 65, 39, 217, 142, 28, 114, 74, 174, 193, 135, 186, 46, 239, 139, 111, 196, 164, 78, 132, 151, 60, 99, 192, 139, 20, 73, 175, 248, 153, 16, 152, 92, 51, 251, 234, 97 }, new byte[] { 209, 155, 214, 140, 89, 3, 193, 198, 32, 243, 98, 94, 114, 79, 237, 194, 204, 54, 225, 239, 19, 139, 206, 179, 223, 199, 40, 63, 132, 142, 234, 8, 180, 29, 12, 156, 46, 130, 163, 242, 144, 205, 240, 112, 206, 255, 19, 171, 65, 208, 158, 47, 153, 235, 172, 119, 168, 217, 48, 48, 21, 221, 148, 170, 228, 241, 7, 130, 236, 197, 208, 234, 70, 162, 9, 1, 240, 193, 170, 125, 252, 156, 254, 185, 202, 120, 133, 60, 91, 89, 175, 186, 84, 186, 169, 133, 119, 224, 238, 176, 39, 85, 175, 94, 107, 51, 135, 214, 90, 136, 38, 79, 191, 43, 96, 100, 115, 91, 78, 201, 11, 63, 48, 253, 168, 236, 127, 26 }, "captain" },
                    { 2, "Monkey D.", false, false, "Luffy", new byte[] { 127, 222, 215, 249, 106, 209, 66, 1, 220, 165, 106, 252, 199, 251, 164, 147, 115, 173, 134, 254, 60, 253, 96, 23, 63, 171, 197, 222, 15, 121, 9, 30, 24, 200, 100, 221, 237, 131, 226, 20, 197, 49, 187, 123, 230, 165, 226, 96, 222, 238, 61, 102, 80, 58, 230, 175, 127, 226, 161, 134, 209, 245, 226, 95 }, new byte[] { 18, 91, 125, 182, 156, 4, 189, 42, 93, 61, 97, 35, 174, 67, 178, 246, 250, 247, 161, 107, 70, 227, 237, 29, 141, 13, 54, 219, 93, 18, 52, 221, 241, 136, 122, 86, 61, 31, 213, 184, 153, 18, 201, 160, 191, 108, 232, 92, 114, 138, 101, 90, 50, 213, 30, 129, 64, 98, 56, 227, 176, 20, 184, 60, 0, 77, 174, 42, 121, 216, 3, 66, 8, 127, 36, 157, 10, 110, 99, 127, 115, 198, 42, 121, 216, 42, 236, 165, 253, 11, 207, 63, 146, 141, 4, 122, 196, 200, 230, 57, 115, 183, 142, 116, 103, 111, 89, 188, 153, 151, 25, 70, 1, 114, 15, 244, 89, 118, 54, 108, 153, 77, 245, 38, 56, 8, 249, 168 }, "luffy" },
                    { 3, "Roronoa", false, false, "Zoro", new byte[] { 209, 104, 168, 12, 227, 117, 126, 185, 162, 147, 119, 186, 31, 66, 251, 196, 144, 14, 36, 165, 147, 182, 251, 168, 86, 132, 66, 221, 222, 140, 17, 226, 209, 210, 67, 153, 143, 244, 76, 228, 203, 63, 35, 240, 250, 236, 1, 13, 140, 3, 188, 43, 242, 153, 165, 210, 7, 212, 213, 75, 174, 224, 224, 69 }, new byte[] { 59, 214, 199, 74, 224, 205, 183, 56, 27, 44, 31, 85, 170, 22, 244, 109, 234, 106, 0, 109, 163, 51, 31, 229, 244, 3, 170, 97, 210, 253, 62, 186, 128, 46, 201, 88, 96, 170, 89, 25, 87, 99, 247, 154, 39, 26, 24, 140, 225, 93, 100, 90, 185, 201, 186, 193, 45, 169, 44, 150, 121, 229, 68, 103, 145, 108, 25, 201, 253, 151, 11, 221, 154, 135, 178, 74, 51, 79, 178, 95, 43, 46, 171, 138, 20, 80, 24, 65, 247, 94, 29, 236, 85, 210, 236, 220, 60, 240, 92, 138, 147, 202, 45, 177, 3, 215, 218, 158, 110, 206, 32, 217, 38, 169, 193, 14, 90, 48, 12, 139, 136, 232, 136, 98, 13, 143, 168, 251 }, "zoro" },
                    { 4, "Vinsmoke", false, false, "Sanji", new byte[] { 62, 57, 125, 70, 67, 227, 136, 243, 87, 33, 145, 153, 22, 165, 179, 207, 12, 141, 89, 114, 136, 121, 115, 228, 200, 20, 158, 96, 124, 72, 14, 57, 96, 183, 56, 195, 38, 90, 193, 184, 82, 108, 191, 183, 117, 74, 238, 224, 112, 35, 20, 111, 37, 36, 251, 157, 93, 198, 114, 155, 220, 68, 128, 236 }, new byte[] { 178, 194, 196, 156, 137, 199, 83, 71, 197, 63, 240, 71, 56, 10, 98, 66, 49, 200, 238, 243, 15, 4, 247, 43, 117, 108, 17, 248, 82, 236, 52, 251, 212, 3, 52, 150, 104, 106, 137, 28, 92, 142, 252, 1, 77, 209, 110, 249, 8, 69, 65, 185, 178, 232, 240, 94, 73, 251, 91, 201, 162, 227, 233, 214, 3, 89, 87, 179, 109, 34, 165, 205, 40, 227, 33, 93, 33, 10, 96, 236, 236, 27, 168, 177, 172, 78, 221, 162, 206, 72, 59, 131, 17, 153, 254, 212, 239, 24, 138, 114, 69, 42, 162, 191, 34, 138, 248, 185, 189, 130, 248, 112, 87, 155, 189, 76, 19, 42, 232, 51, 105, 184, 89, 146, 108, 104, 176, 195 }, "sanji" },
                    { 5, "Captain", false, false, "Usopp", new byte[] { 99, 231, 174, 108, 202, 194, 209, 102, 134, 142, 42, 220, 225, 255, 194, 60, 168, 223, 166, 162, 8, 244, 130, 104, 137, 208, 153, 192, 14, 246, 86, 220, 174, 80, 235, 14, 51, 252, 45, 114, 139, 114, 58, 153, 43, 201, 166, 214, 173, 2, 214, 212, 155, 156, 41, 204, 36, 2, 253, 173, 231, 204, 135, 183 }, new byte[] { 121, 134, 94, 99, 122, 54, 191, 73, 46, 162, 94, 103, 68, 49, 63, 92, 90, 193, 209, 119, 11, 71, 131, 94, 82, 94, 83, 123, 115, 117, 234, 252, 107, 194, 34, 177, 18, 21, 136, 94, 164, 147, 72, 11, 27, 34, 229, 186, 115, 178, 194, 205, 185, 250, 35, 131, 226, 123, 65, 198, 215, 116, 223, 166, 175, 164, 109, 105, 214, 242, 235, 18, 60, 99, 159, 126, 3, 144, 32, 146, 237, 0, 19, 101, 92, 220, 81, 98, 72, 235, 171, 253, 24, 65, 229, 10, 164, 208, 75, 116, 67, 69, 215, 136, 94, 112, 73, 62, 47, 131, 88, 114, 190, 66, 53, 121, 158, 68, 174, 131, 40, 254, 229, 167, 10, 70, 193, 16 }, "usopp" },
                    { 6, "Bellymare", false, false, "Nami", new byte[] { 19, 225, 73, 194, 206, 20, 94, 20, 217, 46, 208, 234, 154, 242, 36, 102, 53, 200, 37, 42, 97, 100, 180, 96, 238, 94, 140, 233, 203, 224, 36, 86, 147, 253, 234, 67, 164, 31, 83, 6, 36, 176, 181, 160, 132, 168, 117, 87, 220, 129, 43, 197, 90, 54, 89, 177, 161, 132, 109, 202, 52, 4, 126, 91 }, new byte[] { 70, 201, 209, 9, 52, 182, 81, 169, 40, 186, 214, 238, 145, 193, 8, 110, 176, 125, 146, 180, 186, 112, 248, 130, 99, 173, 54, 169, 100, 201, 26, 6, 213, 27, 137, 179, 116, 128, 227, 77, 11, 70, 96, 142, 187, 180, 210, 57, 84, 158, 146, 15, 129, 182, 64, 92, 163, 63, 67, 90, 177, 75, 252, 136, 140, 135, 53, 232, 244, 240, 86, 174, 65, 50, 155, 214, 252, 156, 75, 111, 238, 189, 1, 137, 52, 151, 216, 171, 208, 44, 67, 121, 103, 168, 188, 92, 66, 89, 107, 55, 109, 207, 106, 30, 34, 148, 175, 96, 131, 200, 60, 237, 240, 9, 178, 166, 213, 95, 27, 247, 100, 110, 59, 35, 203, 92, 110, 32 }, "nami" },
                    { 7, "Tony Tony", false, false, "chopper", new byte[] { 68, 217, 50, 8, 149, 178, 83, 15, 14, 83, 69, 160, 150, 251, 52, 161, 107, 99, 40, 183, 153, 16, 75, 234, 120, 48, 22, 33, 61, 202, 246, 180, 160, 127, 210, 183, 49, 91, 99, 151, 118, 173, 122, 87, 31, 215, 91, 49, 107, 62, 162, 125, 134, 2, 156, 198, 118, 221, 171, 209, 89, 254, 179, 154 }, new byte[] { 213, 229, 207, 12, 173, 184, 115, 229, 30, 29, 201, 85, 144, 84, 183, 124, 40, 104, 122, 154, 11, 186, 230, 28, 89, 73, 172, 176, 229, 182, 171, 248, 233, 63, 73, 95, 106, 12, 182, 104, 221, 255, 234, 51, 139, 93, 81, 34, 241, 138, 6, 102, 21, 120, 72, 32, 156, 186, 30, 60, 160, 14, 34, 101, 123, 43, 246, 7, 197, 121, 151, 135, 235, 65, 237, 142, 88, 93, 199, 218, 236, 25, 117, 36, 94, 207, 134, 2, 38, 31, 89, 167, 206, 66, 231, 73, 38, 184, 230, 41, 148, 69, 22, 246, 118, 6, 213, 88, 121, 168, 219, 101, 193, 36, 177, 202, 227, 214, 182, 103, 199, 55, 249, 30, 29, 133, 184, 71 }, "chopper" },
                    { 8, "Nico", false, false, "Robin", new byte[] { 36, 254, 155, 56, 167, 142, 248, 108, 218, 231, 8, 10, 138, 252, 144, 96, 223, 61, 35, 225, 249, 48, 163, 162, 193, 56, 42, 209, 113, 153, 121, 11, 141, 227, 177, 135, 110, 178, 51, 221, 190, 111, 37, 221, 224, 30, 103, 250, 53, 70, 199, 7, 195, 229, 158, 139, 129, 236, 99, 82, 107, 54, 34, 100 }, new byte[] { 251, 172, 171, 192, 118, 181, 147, 52, 237, 123, 2, 215, 143, 92, 180, 113, 96, 131, 90, 7, 18, 226, 154, 28, 99, 109, 151, 208, 73, 241, 131, 147, 152, 30, 141, 247, 228, 33, 12, 154, 159, 68, 244, 65, 211, 240, 55, 39, 128, 186, 247, 115, 39, 206, 176, 122, 51, 26, 151, 227, 116, 213, 153, 238, 218, 197, 24, 139, 178, 230, 61, 165, 189, 44, 188, 74, 31, 47, 68, 109, 83, 205, 102, 70, 150, 143, 14, 115, 72, 156, 61, 66, 67, 249, 41, 255, 129, 125, 91, 132, 51, 35, 33, 103, 67, 218, 115, 167, 140, 234, 49, 138, 233, 134, 164, 53, 156, 106, 139, 94, 137, 46, 133, 116, 85, 59, 113, 9 }, "robin" },
                    { 9, "Cutty Flam", false, false, "Franky", new byte[] { 58, 179, 248, 117, 108, 191, 145, 187, 11, 167, 200, 117, 39, 17, 199, 211, 190, 45, 142, 155, 99, 86, 31, 90, 134, 83, 20, 160, 198, 57, 176, 154, 95, 107, 92, 159, 49, 25, 27, 182, 90, 79, 104, 220, 94, 150, 72, 187, 194, 171, 251, 61, 92, 83, 251, 240, 169, 145, 9, 159, 125, 34, 33, 147 }, new byte[] { 191, 225, 244, 26, 46, 20, 228, 23, 3, 227, 219, 110, 105, 170, 58, 220, 8, 136, 163, 213, 46, 66, 62, 234, 118, 36, 248, 180, 155, 28, 1, 30, 21, 1, 120, 132, 3, 23, 155, 229, 240, 149, 24, 231, 74, 164, 65, 3, 70, 112, 227, 229, 182, 172, 110, 135, 244, 119, 143, 19, 235, 143, 188, 18, 169, 136, 25, 196, 218, 12, 226, 28, 180, 13, 194, 171, 95, 104, 150, 187, 6, 46, 240, 242, 177, 165, 32, 125, 181, 31, 222, 197, 179, 255, 219, 192, 147, 188, 122, 6, 125, 171, 22, 48, 114, 62, 140, 70, 116, 82, 12, 205, 143, 82, 51, 197, 95, 84, 150, 77, 185, 41, 58, 169, 225, 142, 13, 144 }, "franky" },
                    { 10, "Soul King", false, false, "Brook", new byte[] { 31, 5, 205, 126, 69, 233, 233, 80, 185, 162, 93, 3, 17, 228, 166, 123, 111, 203, 4, 100, 64, 242, 9, 188, 110, 182, 152, 145, 166, 23, 4, 29, 67, 49, 18, 253, 21, 184, 205, 145, 112, 106, 51, 100, 94, 121, 83, 83, 241, 59, 60, 66, 64, 9, 135, 135, 64, 233, 158, 18, 178, 51, 164, 223 }, new byte[] { 245, 169, 101, 216, 184, 215, 179, 226, 137, 49, 204, 173, 132, 100, 182, 230, 134, 8, 196, 121, 112, 92, 126, 248, 208, 4, 100, 194, 30, 57, 16, 6, 201, 65, 122, 132, 252, 210, 194, 211, 58, 113, 203, 210, 198, 109, 198, 137, 199, 36, 231, 90, 250, 132, 72, 227, 207, 94, 253, 182, 188, 35, 63, 75, 1, 91, 95, 41, 66, 43, 53, 248, 55, 31, 15, 202, 197, 100, 236, 238, 253, 72, 31, 183, 180, 37, 4, 231, 81, 193, 37, 121, 75, 246, 52, 15, 0, 242, 224, 95, 232, 16, 52, 229, 122, 91, 245, 113, 36, 152, 38, 0, 102, 92, 24, 209, 191, 165, 191, 101, 237, 50, 213, 228, 180, 100, 182, 197 }, "brook" },
                    { 11, "Jinbe", false, false, "Jinbei", new byte[] { 109, 189, 178, 227, 242, 153, 22, 242, 192, 171, 90, 227, 229, 120, 111, 19, 198, 74, 102, 49, 192, 106, 168, 203, 17, 192, 71, 163, 229, 227, 203, 212, 16, 180, 225, 191, 223, 89, 75, 108, 89, 130, 138, 175, 81, 151, 35, 107, 7, 142, 182, 203, 208, 16, 149, 125, 16, 72, 145, 158, 33, 71, 10, 178 }, new byte[] { 220, 196, 22, 219, 229, 146, 177, 166, 145, 168, 254, 83, 195, 139, 86, 138, 196, 175, 219, 52, 70, 148, 154, 173, 4, 232, 132, 220, 40, 88, 154, 214, 19, 58, 199, 84, 158, 66, 140, 254, 104, 31, 204, 171, 186, 49, 97, 40, 179, 35, 4, 152, 159, 190, 113, 235, 182, 19, 230, 46, 236, 207, 1, 238, 112, 205, 151, 242, 183, 165, 237, 148, 171, 78, 0, 166, 151, 1, 10, 230, 187, 150, 80, 4, 65, 42, 103, 128, 246, 157, 15, 100, 28, 201, 161, 41, 81, 26, 149, 13, 46, 99, 27, 77, 253, 123, 204, 119, 139, 223, 185, 118, 82, 47, 157, 205, 239, 51, 55, 38, 124, 246, 243, 68, 151, 24, 76, 229 }, "jinbei" }
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 1);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 2);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 3);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 4);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 5);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 6);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 7);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 8);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 9);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 10);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 11);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 12);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 13);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 14);

            migrationBuilder.DeleteData(
                table: "Cars",
                keyColumn: "Id",
                keyValue: 15);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 2);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 3);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 4);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 5);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 6);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 7);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 8);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 9);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 10);

            migrationBuilder.DeleteData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 11);
        }
    }
}
